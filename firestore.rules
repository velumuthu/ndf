
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is authenticated and their email is in the admin list.
      return request.auth != null && exists(/databases/$(database)/documents/roles/admin) && get(/databases/$(database)/documents/roles/admin).data.emails.has(request.auth.token.email);
    }

    // Products can be read by anyone, but only managed by admins.
    match /products/{productId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }

    // Offers can be read by anyone, but only managed by admins.
    match /offers/{offerId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }

    // Authenticated users can create their own orders. Only admins can view all orders (for now, no read access for anyone).
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, list, update, delete: if isAdmin();
    }

    // Authenticated users can create bulk orders. Admins can view all bulk orders.
    match /bulk-orders/{inquiryId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, list, update, delete: if isAdmin();
    }

    // Role management
    match /roles/{role} {
       // ANY authenticated user can create the 'admin' document IF it does not exist.
       // This is a secure way to allow the first admin user to be bootstrapped.
      allow create: if request.auth != null && role == 'admin' && !exists(/databases/$(database)/documents/roles/admin);
      
      // Only existing admins can read or update the roles.
      allow read, update, delete: if isAdmin();
    }
  }
}
